package com.spring.project.library.controller;

import com.spring.project.library.dto.LoanDetailsDto;
import com.spring.project.library.dto.LoanRequestDto;
import com.spring.project.library.dto.StatusResponse;
import com.spring.project.library.exception.LibraryOperationException;
import com.spring.project.library.exception.ResourceNotFoundException;
import com.spring.project.library.model.Loan;
import com.spring.project.library.model.User;
import com.spring.project.library.service.LoanService;
import com.spring.project.library.service.UserService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/loans")
public class LoanController {

    private final LoanService loanService;
    private final UserService userService;

    public LoanController(LoanService loanService, UserService userService) {
        this.loanService = loanService;
        this.userService = userService;
    }

    // L·∫•y ID ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ Spring Security Context
    private Long getCurrentUserId(Authentication authentication) {
        // L·∫•y username t·ª´ Authentication object
        String username = authentication.getName();
        // B·∫°n c·∫ßn ph∆∞∆°ng th·ª©c t√¨m ki·∫øm User theo username trong UserService/Repository
        // Gi·∫£ s·ª≠ b·∫°n ƒë√£ th√™m ph∆∞∆°ng th·ª©c n√†y trong UserService
        return userService.findByUsername(username).getId();

        // T·∫°m th·ªùi, do b·∫°n kh√¥ng cung c·∫•p UserService.findUserByUsername, 
        // v√† b·∫°n ƒëang d√πng Basic Auth, ta s·∫Ω gi·∫£ ƒë·ªãnh userId l√† Long v√† b·ªè qua 
        // vi·ªác l·∫•y ID th·ª±c s·ª±. 
        // TRONG TH·ª∞C T·∫æ, B·∫†N PH·∫¢I T√åM USER ID T·ª™ USERNAME ƒê·ªÇ L·∫§Y LOAN.

        // V√¨ m·ª•c ƒë√≠ch demo, ta s·∫Ω y√™u c·∫ßu Frontend truy·ªÅn ID cho Loan/Return.
        // HO·∫∂C, b·∫°n c·∫ßn thay ƒë·ªïi Authentication ƒë·ªÉ l∆∞u User ID.
        // T·ªët nh·∫•t l√† th√™m: 
        // User user = userRepository.findByUsername(username).get();
        // return user.getId();
        // throw new UnsupportedOperationException("C·∫ßn implement logic l·∫•y User ID t·ª´ username.");
    }

    // üéØ Gi·∫£ ƒë·ªãnh: Frontend g·ª≠i c·∫£ userId v√† bookId trong request

    // POST: T·∫°o Loan m·ªõi (Cho m∆∞·ª£n)
    @PostMapping("/borrow")
    // Y√™u c·∫ßu quy·ªÅn MEMBER ho·∫∑c ADMIN
    public ResponseEntity<?> borrowBook(Authentication authentication, @Valid @RequestBody LoanRequestDto requestDto) {
        try {
            Long userId = getCurrentUserId(authentication);

            Loan loan = loanService.createNewLoan(userId, requestDto);
            return ResponseEntity.status(HttpStatus.CREATED).body(new StatusResponse("SUCCESS", "M∆∞·ª£n s√°ch th√†nh c√¥ng, Loan ID: " + loan.getId()));
        } catch (ResourceNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new StatusResponse("ERROR", e.getMessage()));
        } catch (LibraryOperationException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new StatusResponse("ERROR", e.getMessage()));
        }
    }

    // PUT: Tr·∫£ s√°ch
    @PutMapping("/return/{loanId}")
    // Y√™u c·∫ßu quy·ªÅn MEMBER ho·∫∑c ADMIN
    public ResponseEntity<?> returnBook(@PathVariable Long loanId) {
        try {
            Loan loan = loanService.returnLoan(loanId);
            return ResponseEntity.ok(new StatusResponse("SUCCESS", "Tr·∫£ s√°ch th√†nh c√¥ng, Book: " + loan.getBook().getTitle()));
        } catch (ResourceNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new StatusResponse("ERROR", e.getMessage()));
        } catch (LibraryOperationException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new StatusResponse("ERROR", e.getMessage()));
        }
    }

    // GET: Xem l·ªãch s·ª≠ m∆∞·ª£n (ch·ªâ cho ng∆∞·ªùi d√πng hi·ªán t·∫°i)
    @GetMapping("/my-history")
    public ResponseEntity<List<LoanDetailsDto>> getActiveLoansForUser(Authentication authentication) {
        Long userId = getCurrentUserId(authentication);

        List<LoanDetailsDto> loans = loanService.getLoansByUserId(userId);
        return ResponseEntity.ok(loans);
    }
}